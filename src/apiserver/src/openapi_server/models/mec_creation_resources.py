# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MECCreationResources(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, memory: str=None, cpu: str=None, gpu: str=None, storage: str=None):  # noqa: E501
        """MECCreationResources - a model defined in Swagger

        :param memory: The memory of this MECCreationResources.  # noqa: E501
        :type memory: str
        :param cpu: The cpu of this MECCreationResources.  # noqa: E501
        :type cpu: str
        :param gpu: The gpu of this MECCreationResources.  # noqa: E501
        :type gpu: str
        :param storage: The storage of this MECCreationResources.  # noqa: E501
        :type storage: str
        """
        self.swagger_types = {
            'memory': str,
            'cpu': str,
            'gpu': str,
            'storage': str
        }

        self.attribute_map = {
            'memory': 'memory',
            'cpu': 'cpu',
            'gpu': 'gpu',
            'storage': 'storage'
        }
        self._memory = memory
        self._cpu = cpu
        self._gpu = gpu
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt) -> 'MECCreationResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MECCreation_resources of this MECCreationResources.  # noqa: E501
        :rtype: MECCreationResources
        """
        return util.deserialize_model(dikt, cls)

    @property
    def memory(self) -> str:
        """Gets the memory of this MECCreationResources.


        :return: The memory of this MECCreationResources.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory: str):
        """Sets the memory of this MECCreationResources.


        :param memory: The memory of this MECCreationResources.
        :type memory: str
        """

        self._memory = memory

    @property
    def cpu(self) -> str:
        """Gets the cpu of this MECCreationResources.


        :return: The cpu of this MECCreationResources.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: str):
        """Sets the cpu of this MECCreationResources.


        :param cpu: The cpu of this MECCreationResources.
        :type cpu: str
        """

        self._cpu = cpu

    @property
    def gpu(self) -> str:
        """Gets the gpu of this MECCreationResources.


        :return: The gpu of this MECCreationResources.
        :rtype: str
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu: str):
        """Sets the gpu of this MECCreationResources.


        :param gpu: The gpu of this MECCreationResources.
        :type gpu: str
        """

        self._gpu = gpu

    @property
    def storage(self) -> str:
        """Gets the storage of this MECCreationResources.


        :return: The storage of this MECCreationResources.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage: str):
        """Sets the storage of this MECCreationResources.


        :param storage: The storage of this MECCreationResources.
        :type storage: str
        """

        self._storage = storage
